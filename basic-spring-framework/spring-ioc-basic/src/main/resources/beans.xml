<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 针对于所有beans的全局的设置，bean中声明统一标准化的方法
         default-init-method="postConstruct" -->

    <!-- 直接通过Eclipse Bean UI界面来添加: 准确定位要找到的类型，避免手写出错 
         autowire="default" 使用默认的构造器来创建对象, 默认使用类型的默认值 
         当自定义含参的构造器之后，需要提供构造器参数 -->
    <bean id="myBean" class="xml.BaseBean">
        <!-- 传入构造器参数，会根据类型自动转换，按照顺序index传入指定的参数值
             可以直接使用field名称来赋值 name="count" -->
        <constructor-arg index="0" value="Demo"></constructor-arg>
        <constructor-arg index="1" value="100"></constructor-arg>

        <!-- 使用Constructor based DI -->
        <constructor-arg name="hireService" ref="agencyHireService"></constructor-arg>

        <!-- property属性注入的名称必须严格的一致
            等效的设置
            <property name="postalCode">
                <value>121212</value>
            </property> -->
        <property name="postalCode" value="121212"></property>

        <!-- 使用Setter based DI: 注入container中自定义的bean, 使用ref name
             TODO. 这里使用的是声明好的bean的名称 -->
        <property name="baseService" ref="ecommerceService"></property>
    </bean>

    <bean id="cloudService" class="xml.serviceimpl.CloudServiceImpl"/>
    <bean id="ecommerceService" class="xml.serviceimpl.EcommerceServiceImpl"/>
    <bean id="agencyHireService" class="xml.serviceimpl.AgencyHireServiceImpl"/>
    <bean id="companyHireService" class="xml.serviceimpl.CompanyHireServiceImpl"/>

    <!-- 默认bean scope是singleton: 不需要添加
    <bean id="myBeanDemo" class="com.example.MyBeanDemo"
          scope="singleton"         默认的Scope作用域为singleton，无需设置
          destroy-method="destroy"  调用bean中定义的方法在不同的生命周期执行
          init-method="initialize" /> -->
</beans>








