<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 添加component scan扫描指定的package中的添加了@Component注解的类型来作为bean
         该功能同时默认具有<context:annotation-JndiDataSource/>的功能，能够监测到特定的annotation标记
         使用scan方式获取component，则不需要再标明<bean>的配置 -->
    <context:component-scan base-package="annotation"/>

    <!-- 添加annotation的配置，需要补充命名空间xmlns:context="http://www.springframework.org/schema/context"
         Activate spring infrastructure for annotations to be detected in bean class
         1. 实际会多加载bean到Spring container中
         2. 同时会创建org.springframework.context.annotation.CommonAnnotationBeanPostProcessor实例 -->
    <!-- <context:annotation-JndiDataSource/> -->

    <!-- 这里的配置是为了使用特定的annotation来控制bean的lifecycle
         @PostConstruct  @PreDestroy
         Register the bean with CommonAnnotationBeanPostProcessor
         Define a bean definition for the container to recognize the annotation ! -->
    <!-- <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/> -->

    <!-- 通过声明的bean id从container中获取注入的类型(提供全路径) -->
    <!-- <bean id="numberGenerator" class="main.lifecycle.NumberGeneratorImpl">
             里面可设置类型的属性和方法的使用
             For each bean, its dependencies are expressed in the form of properties or constructor arguments
             Each property or constructor argument is the value to set, or a reference to another bean
             These dependencies are provided to bean when it's created
             The bean properties are not set until the bean is created
    </bean> -->

    <!-- 可以直接在XML中配置并添加外部的Properties file，在运行的时候完成替换(注入)
         PropertyPlaceholderConfigurer 类型已经被废弃 !!!
         默认这里会检查Java System properties系统配置文件，如果有相同的名称key出现替换的情况
         system-properties-mode="NEVER" 表示不检查系统的配置，直接使用自定义的配置 -->
    <context:property-placeholder system-properties-mode="NEVER" location="classpath:placeholderConfigure.properties"/>

    <bean id="dataSource" class="annotation.config.MyDateSource">
        <!-- 通过setter方法注入 -->
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
</beans>