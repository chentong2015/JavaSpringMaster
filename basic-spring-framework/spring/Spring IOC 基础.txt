TODO. Spring IoC: 依赖注入 --> 控制反转
1. 谁控制谁: IoC容器控制bean的声明周期
2. 控制什么: Bean(对象)
3. 为什么要控制: 解耦，依赖抽象
4. 那些方面反转: 创建的权利反转，交给容器来托管

// ApplicationContext:
// 1. 构建于Core和Bean之上，提供国际化，资源加载等高级支持，非延时加载
// 2. (包含)BeanFactory: 实现基础的bean, 控制反转，延时加载

// 如何理解Spring IoC容器?  Spring IOC Container是什么?
// BeanFactory IoC容器 : 完成一序列功能的一系列组件共同构成IOC容器
// FactoryBean bean工厂: getObject()从容器中返回的对象由这个对象确定

// SingletonObjects  单例缓存池(存放bean对象的), 使用ConcurrentHashMap类型, 多个线程可以使用Spring中同一个单例缓存池
// BeanDefinitionMap bean定义对象存储地方
// BeanFactoryPostProcessor
// BeanPostProcess   bean后置处理器的集合
// ...

TODO. 从spring3.0版本之后，推荐使用注解的方式，而非使用XML配置
Spring IoC Container: Component of Spring framework, contains "Beans" and manage lifecycle
(Business Objects(POJOs) / Beans)
(Configuration metadata) 读取metadata配置之后，POJOs会被加载到IoC Container

## XML based Configuration 使用XML配置的特点
1. Centralize config metadata 很容易看到整个的配置, 容易修改
2. 位于Java Class之外, 对于xml配置文件的更改，不需要修改代码和重新编译
3. Verbose冗长，需要理解偏背后的逻辑
4. Typing严格的字符输入敏感，容易造成错误，并不是类型安全的

## Annotation Based configurations 推荐使用Annotations
1. 类型安全，比XML更加的短小
2. 比较难从整体上宏观的去注意整个配置metadata
3. 需要重新编译，编译安全
4. 同时能够将配置文件进行分离到separate file: .properties