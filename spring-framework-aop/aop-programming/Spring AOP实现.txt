Spring AOP编程
1. @EnableAspectJAutoProxy 激活AspectJ方面编程
2. @Aspect @Component      注入Aspect Bean
3. @Pointcut               定义切入点以及执行的逻辑

TODO: AOP如何解析切面 ?
BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()
1. 从容器中获取所有的bean进行遍历，从bean的名称中获取class对象，然后判断是否标注@Aspect注解，如果是则为切面类型
2. 通过利用反射拿到method上的注解，判断不同的注解类型@Before, @After
3. 根据不同的注解类型创建指定类型的对象，保存到advisorsCache缓存中

TODO: Spring如何判断bean原始对象需要执行AOP，是否有切面?
Aspect切面本身是一个bean，会添加到Spring容器中
1. 从Spring容器中找出所有切面bean，全部遍历
2. 遍历每一个切面bean的所有方法，是否有配的切匹面方法
3. 如果有则将切面方法(代理逻辑)保存到Proxy代理类型，之后执行


TODO. @EnableAspectJAutoProxy 本质上是往Spring IoC中注入了一个后置处理器
 通过后置处理器来生成代理对象并添加对应的Aspect切面
AnnotationAwareAspectJAutoProxyCreator.class extends BeanPostProcessor

@EnableAspectJAutoProxy(proxyTargetClass = false, exposeProxy = false)
1. proxyTargetClass = false 默认使用JdkDynamicAopProxy，而不是cglib代理
2. exposeProxy = false      默认不将Proxy暴露给ThreadLocal，无法通过AopContext.currentProxy()获取

TODO: exposeProxy: 配置是否将proxy暴露到ThreadLocal
Proxy should be exposed by the AOP framework as ThreadLocal for retrieval via the AopContext
指示代理应由AOP框架公开为ThreadLocal(线程本地存储), 之后通过AopContext类来进行检索
  JdkDynamicAopProxy.invoke()
  	if (this.advised.exposeProxy) {
  	保存之前老的proxy，用于在finally中恢复
  	oldProxy = AopContext.setCurrentProxy(proxy);
  	setProxyContext = true;
  }
  exposeProxy=true;  从线程变量中取出代理对象，然后调用方法，同样会被切入(被增强)
  exposeProxy=false; 该方法的调用this.add(10, 10);不会被增强