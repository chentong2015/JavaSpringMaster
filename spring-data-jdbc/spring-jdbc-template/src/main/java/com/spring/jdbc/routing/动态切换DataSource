Spring使用路由来动态的切换DataSource数据源
分库分表策略
1. 多库多表 ROUTING_DS_TABLE_STRATEGY  --> RoutingDsAndTbStrategy
2. 多库一表 ROUTING_DS_STRATEGY        --> RoutingDsStrategy
3. 一库多表 ROUTING_TABLE_STRATEGY     --> RoutingTbStrategy

规则类：接口类
IRoutingDbTable {
   calDataSourceKey(String routingField) 计算数据落入到那个库中
   getTableKey(String routingField) 计算数据落入到库中的那个表中
   getFormatTableSuffix(Integer tableIndex) 表后缀的拼接的方式 order_info_001
   getRoutingFileHashCode(String routingField)
}
抽象类
AbstractRoutingDbTable {
   公共方法统一提取到抽象类中，消除冗余代码
   dataSource.properties中静态数据配置检测
}

TODO: 数据库的获取
AbstractRoutingDataSource.determineTargetDataSource(){
   方法会推断使用的数据源，调用下面方法的实现
   Object lookupKey = this.determineCurrentLookupKey();
   拿到的lookupKey是动态获取的
   DataSource dataSource = (DataSource)this.resolvedDataSources.get(lookupKey);
}

TODO: 使用拼接的方式获得最终的表: ${}是用来拼接的
MyBatis：
<insert id="insertOrder" parameterType="routing_datasource.dataModel.Order">
  insert into order${tableSuffix} (order_id,user_id,money) values(#{orderId},#{userid},#{money})
</insert>
