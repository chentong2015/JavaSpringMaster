TODO: Spring如何判断Service类/原始对象需要执行AOP? 是否有切面?
Aspect切面本身是一个bean，会添加到Spring容器中
1. 从Spring容器中找出所有切面bean，全部遍历
2. 遍历每一个切面bean的所有方法，是否有对应的切面(匹配)
3. 如果有则保存切面方法(代理逻辑)到代理类型，之后会执行

TODO: AOP如何解析切面 ?
BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()
1. 从容器中获取所有的bean进行遍历，从bean的名称中获取class对象，然后判断是否标注@Aspect注解，如果是则为切面类型
2. 通过利用反射拿到method上的注解，判断不同的注解类型@Before, @After
3. 根据不同的注解类型创建指定类型的对象，保存到advisorsCache缓存中

TODO: exposeProxy: 配置是否将proxy暴露到ThreadLocal
Proxy should be exposed by the AOP framework as a ThreadLocal for retrieval via the AopContext class.
指示代理应由AOP框架公开为ThreadLocal(线程本地存储), 之后通过AopContext类来进行检索
    JdkDynamicAopProxy.invoke()
    	if (this.advised.exposeProxy) {
    	保存之前老的proxy，用于在finally中恢复
    	oldProxy = AopContext.setCurrentProxy(proxy);
    	setProxyContext = true;
    }
    exposeProxy=true;  从线程变量中取出代理对象，然后调用方法，同样会被切入(被增强)
    exposeProxy=false; 该方法的调用this.add(10, 10);不会被增强


https://docs.spring.io/spring-framework/docs/4.3.15.RELEASE/spring-framework-reference/html/aop.html
https://docs.spring.io/spring-framework/docs/2.0.x/reference/aop.html